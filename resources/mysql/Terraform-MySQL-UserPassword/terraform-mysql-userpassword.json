{
    "typeName": "Terraform::MySQL::UserPassword",
    "description": "The `mysql_user_password` resource sets and manages a password for a given \nuser on a MySQL server.\n\n~> **NOTE on MySQL Passwords:** This resource conflicts with the `password` \n   argument for `mysql_user`. This resource uses PGP encryption to avoid \n   storing unencrypted passwords in Terraform state.\n   \n~> **NOTE on How Passwords are Created:** This resource **automatically**\n   generates a **random** password. The password will be a random UUID.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/mysql/Terraform-MySQL-UserPassword/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "EncryptedPassword": {
            "type": "string"
        },
        "Host": {
            "type": "string",
            "description": "The source host of the user. Defaults to `localhost`."
        },
        "Id": {
            "type": "string"
        },
        "KeyFingerprint": {
            "type": "string"
        },
        "PgpKey": {
            "type": "string",
            "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`."
        },
        "User": {
            "type": "string",
            "description": "The IAM user to associate with this access key."
        }
    },
    "additionalProperties": false,
    "required": [
        "PgpKey",
        "User"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/EncryptedPassword",
        "/properties/Id",
        "/properties/KeyFingerprint"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "read": {
            "permissions": []
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}