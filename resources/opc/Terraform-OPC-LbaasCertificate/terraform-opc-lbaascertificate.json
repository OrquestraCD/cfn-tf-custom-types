{
    "typeName": "Terraform::OPC::LbaasCertificate",
    "description": "The `opc_lbaas_certificate` resource creates and manages an Load Balancer Classic TLS/SSL Digital Certificate.\n\nServer certificates are used to secure the connection between clients and the load balancers. Trusted certificates are used to secure the connection between the load balancer and the origin servers in the server pool.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "CertificateBody": {
            "type": "string",
            "description": "The Certificate data in PEM format."
        },
        "CertificateChain": {
            "type": "string",
            "description": "PEM encoded bodies of all certificates in the chain up to and including the CA certificate. This is not need when the certificate is self signed."
        },
        "Id": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "The name of the Certificate."
        },
        "PrivateKey": {
            "type": "string",
            "description": "The private key data in PEM format. Only required for Server Certificates."
        },
        "State": {
            "type": "string"
        },
        "Type": {
            "type": "string",
            "description": "Sets the Certificate Type. `TRUSTED` or `SERVER`."
        },
        "Uri": {
            "type": "string"
        }
    },
    "additionalProperties": false,
    "required": [
        "CertificateBody",
        "Name",
        "Type"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id",
        "/properties/State",
        "/properties/Uri"
    ],
    "primaryIdentifier": [
        "/properties/Id"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "read": {
            "permissions": []
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}