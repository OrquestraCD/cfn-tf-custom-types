{
    "typeName": "Terraform::OpenTelekomCloud::LbListenerV2",
    "description": "Manages an Enhanced LB listener resource within OpenTelekomCloud.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/opentelekomcloud/Terraform-OpenTelekomCloud-LbListenerV2/docs/README.md",
    "definitions": {
        "Timeouts": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AdminStateUp": {
            "type": "boolean",
            "description": "The administrative state of the Listener.\nA valid value is true (UP) or false (DOWN)."
        },
        "DefaultPoolId": {
            "type": "string",
            "description": "The ID of the default pool with which the\nListener is associated. Changing this creates a new Listener."
        },
        "DefaultTlsContainerRef": {
            "type": "string",
            "description": "A reference to a Barbican Secrets\ncontainer which stores TLS information. This is required if the protocol\nis `TERMINATED_HTTPS`. See\n[here](https://wiki.openstack.org/wiki/Network/LBaaS/docs/how-to-create-tls-loadbalancer)\nfor more information."
        },
        "Description": {
            "type": "string",
            "description": "Human-readable description for the Listener."
        },
        "Id": {
            "type": "string"
        },
        "LoadbalancerId": {
            "type": "string",
            "description": "The load balancer on which to provision this\nListener. Changing this creates a new Listener."
        },
        "Name": {
            "type": "string",
            "description": "Human-readable name for the Listener. Does not have\nto be unique."
        },
        "Protocol": {
            "type": "string",
            "description": "The protocol - can either be TCP, HTTP, HTTPS or TERMINATED_HTTPS.\nChanging this creates a new Listener."
        },
        "ProtocolPort": {
            "type": "number",
            "description": "The port on which to listen for client traffic.\nChanging this creates a new Listener."
        },
        "Region": {
            "type": "string"
        },
        "SniContainerRefs": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "A list of references to Barbican Secrets\ncontainers which store SNI information. See\n[here](https://wiki.openstack.org/wiki/Network/LBaaS/docs/how-to-create-tls-loadbalancer)\nfor more information."
        },
        "TenantId": {
            "type": "string",
            "description": "Required for admins. The UUID of the tenant who owns\nthe Listener.  Only administrative users can specify a tenant UUID\nother than their own. Changing this creates a new Listener."
        },
        "Timeouts": {
            "$ref": "#/definitions/Timeouts"
        }
    },
    "additionalProperties": false,
    "required": [
        "LoadbalancerId",
        "Protocol",
        "ProtocolPort"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "read": {
            "permissions": []
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}