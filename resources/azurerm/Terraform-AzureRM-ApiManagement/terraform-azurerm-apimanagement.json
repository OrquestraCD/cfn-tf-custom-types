{
    "typeName": "Terraform::AzureRM::ApiManagement",
    "description": "Manages an API Management Service.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "definitions": {
        "AdditionalLocation": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Location": {
                    "type": "string",
                    "description": "The name of the Azure Region in which the API Management Service should be expanded to."
                }
            },
            "required": [
                "Location"
            ]
        },
        "Certificate": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "CertificatePassword": {
                    "type": "string",
                    "description": "The password for the certificate."
                },
                "EncodedCertificate": {
                    "type": "string",
                    "description": "The Base64 Encoded PFX Certificate."
                },
                "StoreName": {
                    "type": "string",
                    "description": "The name of the Certificate Store where this certificate should be stored. Possible values are `CertificateAuthority` and `Root`."
                }
            },
            "required": [
                "CertificatePassword",
                "EncodedCertificate",
                "StoreName"
            ]
        },
        "HostnameConfiguration": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Management": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/Management"
                    }
                },
                "Portal": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/Portal"
                    }
                },
                "Proxy": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/Proxy"
                    }
                },
                "Scm": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/Scm"
                    }
                }
            },
            "required": []
        },
        "Identity": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Type": {
                    "type": "string",
                    "description": "Specifies the type of Managed Service Identity that should be configured on this API Management Service. At this time the only supported value is`SystemAssigned`."
                }
            },
            "required": [
                "Type"
            ]
        },
        "Protocols": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "EnableHttp2": {
                    "type": "boolean",
                    "description": "Should HTTP/2 be supported by the API Management Service? Defaults to `false`."
                }
            },
            "required": []
        },
        "Security": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "EnableBackendSsl30": {
                    "type": "boolean",
                    "description": "Should SSL 3.0 be enabled on the backend of the gateway? Defaults to `false`."
                },
                "EnableBackendTls10": {
                    "type": "boolean",
                    "description": "Should TLS 1.0 be enabled on the backend of the gateway? Defaults to `false`."
                },
                "EnableBackendTls11": {
                    "type": "boolean",
                    "description": "Should TLS 1.1 be enabled on the backend of the gateway? Defaults to `false`."
                },
                "EnableFrontendSsl30": {
                    "type": "boolean",
                    "description": "Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to `false`."
                },
                "EnableFrontendTls10": {
                    "type": "boolean",
                    "description": "Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to `false`."
                },
                "EnableFrontendTls11": {
                    "type": "boolean",
                    "description": "Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to `false`."
                },
                "EnableTripleDesCiphers": {
                    "type": "boolean",
                    "description": "Should the `TLS_RSA_WITH_3DES_EDE_CBC_SHA` cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)? Defaults to `false`."
                }
            },
            "required": []
        },
        "SignIn": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Enabled": {
                    "type": "boolean",
                    "description": "Should anonymous users be redirected to the sign in page?."
                }
            },
            "required": [
                "Enabled"
            ]
        },
        "SignUp": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Enabled": {
                    "type": "boolean",
                    "description": "Can users sign up on the development portal?."
                },
                "TermsOfService": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/TermsOfService"
                    },
                    "maxItems": 1,
                    "minItems": 1
                }
            },
            "required": [
                "Enabled"
            ]
        },
        "Timeouts": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Read": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        },
        "Management": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Certificate": {
                    "type": "string"
                },
                "CertificatePassword": {
                    "type": "string"
                },
                "HostName": {
                    "type": "string"
                },
                "KeyVaultId": {
                    "type": "string"
                },
                "NegotiateClientCertificate": {
                    "type": "boolean"
                }
            },
            "required": [
                "HostName"
            ]
        },
        "Portal": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Certificate": {
                    "type": "string"
                },
                "CertificatePassword": {
                    "type": "string"
                },
                "HostName": {
                    "type": "string"
                },
                "KeyVaultId": {
                    "type": "string"
                },
                "NegotiateClientCertificate": {
                    "type": "boolean"
                }
            },
            "required": [
                "HostName"
            ]
        },
        "Proxy": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Certificate": {
                    "type": "string",
                    "description": "The Base64 Encoded Certificate."
                },
                "CertificatePassword": {
                    "type": "string",
                    "description": "The password associated with the certificate provided above."
                },
                "DefaultSslBinding": {
                    "type": "boolean",
                    "description": "Is the certificate associated with this Hostname the Default SSL Certificate? This is used when an SNI header isn't specified by a client. Defaults to `false`."
                },
                "HostName": {
                    "type": "string",
                    "description": "The Hostname to use for the Management API."
                },
                "KeyVaultId": {
                    "type": "string",
                    "description": "The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`."
                },
                "NegotiateClientCertificate": {
                    "type": "boolean",
                    "description": "Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`."
                }
            },
            "required": [
                "HostName"
            ]
        },
        "Scm": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Certificate": {
                    "type": "string",
                    "description": "The Base64 Encoded Certificate."
                },
                "CertificatePassword": {
                    "type": "string",
                    "description": "The password associated with the certificate provided above."
                },
                "HostName": {
                    "type": "string",
                    "description": "The Hostname to use for the Management API."
                },
                "KeyVaultId": {
                    "type": "string",
                    "description": "The ID of the Key Vault Secret containing the SSL Certificate, which must be should be of the type `application/x-pkcs12`."
                },
                "NegotiateClientCertificate": {
                    "type": "boolean",
                    "description": "Should Client Certificate Negotiation be enabled for this Hostname? Defaults to `false`."
                }
            },
            "required": [
                "HostName"
            ]
        },
        "TermsOfService": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ConsentRequired": {
                    "type": "boolean",
                    "description": "Should the user be asked for consent during sign up?."
                },
                "Enabled": {
                    "type": "boolean",
                    "description": "Should Terms of Service be displayed during sign up?."
                },
                "Text": {
                    "type": "string",
                    "description": "The Terms of Service which users are required to agree to in order to sign up."
                }
            },
            "required": [
                "ConsentRequired",
                "Enabled"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "GatewayRegionalUrl": {
            "type": "string"
        },
        "GatewayUrl": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "Location": {
            "type": "string",
            "description": "The Azure location where the API Management Service exists. Changing this forces a new resource to be created."
        },
        "ManagementApiUrl": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "The name of the API Management Service. Changing this forces a new resource to be created."
        },
        "NotificationSenderEmail": {
            "type": "string",
            "description": "Email address from which the notification will be sent."
        },
        "Policy": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "XmlContent": {
                        "type": "string"
                    },
                    "XmlLink": {
                        "type": "string"
                    }
                }
            },
            "description": "A `policy` block as defined below."
        },
        "PortalUrl": {
            "type": "string"
        },
        "PublicIpAddresses": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            }
        },
        "PublisherEmail": {
            "type": "string",
            "description": "The email of publisher/company."
        },
        "PublisherName": {
            "type": "string",
            "description": "The name of publisher/company."
        },
        "ResourceGroupName": {
            "type": "string",
            "description": "The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created."
        },
        "ScmUrl": {
            "type": "string"
        },
        "SkuName": {
            "type": "string",
            "description": "`sku_name` is a string consisting of two parts separated by an underscore(\\_). The fist part is the `name`, valid values include: `Developer`, `Basic`, `Standard` and `Premium`. The second part is the `capacity` (e.g. the number of deployed units of the `sku`), which must be a positive `integer` (e.g. `Developer_1`)."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "MapKey": {
                        "type": "string"
                    },
                    "MapValue": {
                        "type": "string"
                    }
                },
                "required": [
                    "MapKey",
                    "MapValue"
                ]
            },
            "description": "A mapping of tags assigned to the resource."
        },
        "AdditionalLocation": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/AdditionalLocation"
            }
        },
        "Certificate": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/Certificate"
            },
            "maxItems": 10
        },
        "HostnameConfiguration": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/HostnameConfiguration"
            },
            "maxItems": 1
        },
        "Identity": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/Identity"
            },
            "maxItems": 1
        },
        "Protocols": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/Protocols"
            },
            "maxItems": 1
        },
        "Security": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/Security"
            },
            "maxItems": 1
        },
        "SignIn": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/SignIn"
            },
            "maxItems": 1
        },
        "SignUp": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/SignUp"
            },
            "maxItems": 1
        },
        "Timeouts": {
            "$ref": "#/definitions/Timeouts"
        },
        "Management": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/Management"
            }
        },
        "Portal": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/Portal"
            }
        },
        "Proxy": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/Proxy"
            }
        },
        "Scm": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/Scm"
            }
        },
        "TermsOfService": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/TermsOfService"
            },
            "maxItems": 1,
            "minItems": 1
        }
    },
    "additionalProperties": false,
    "required": [
        "Location",
        "Name",
        "PublisherEmail",
        "PublisherName",
        "ResourceGroupName",
        "SkuName"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/GatewayRegionalUrl",
        "/properties/GatewayUrl",
        "/properties/Id",
        "/properties/ManagementApiUrl",
        "/properties/PortalUrl",
        "/properties/PublicIpAddresses",
        "/properties/ScmUrl"
    ],
    "primaryIdentifier": [
        "/properties/Id"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "read": {
            "permissions": []
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}