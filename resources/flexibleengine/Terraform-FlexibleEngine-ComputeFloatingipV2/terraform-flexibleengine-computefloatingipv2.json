{
    "typeName": "Terraform::FlexibleEngine::ComputeFloatingipV2",
    "description": "Manages a V2 floating IP resource within FlexibleEngine Nova (compute)\nthat can be used for compute instances.\nThese are similar to Neutron (networking) floating IP resources,\nbut only networking floating IPs can be used with load balancers.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/flexibleengine/Terraform-FlexibleEngine-ComputeFloatingipV2/docs/README.md",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Address": {
            "type": "string"
        },
        "FixedIp": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "InstanceId": {
            "type": "string"
        },
        "Pool": {
            "type": "string",
            "description": "The name of the pool from which to obtain the floating\nIP. Default value is admin_external_net. Changing this creates a new floating IP."
        },
        "Region": {
            "type": "string",
            "description": "The region in which to obtain the V2 Compute client.\nA Compute client is needed to create a floating IP that can be used with\na compute instance. If omitted, the `region` argument of the provider\nis used. Changing this creates a new floating IP (which may or may not\nhave a different address)."
        }
    },
    "additionalProperties": false,
    "required": [],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Address",
        "/properties/FixedIp",
        "/properties/Id",
        "/properties/InstanceId"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}