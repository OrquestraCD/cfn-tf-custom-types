{
    "typeName": "Terraform::CloudStack::NetworkAclRule",
    "description": "Creates network ACL rules for a given network ACL.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/cloudstack/Terraform-CloudStack-NetworkAclRule/docs/README.md",
    "definitions": {
        "Rule": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Action": {
                    "type": "string",
                    "description": "The action for the rule. Valid options are: `allow` and\n`deny` (defaults allow)."
                },
                "CidrList": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "A CIDR list to allow access to the given ports."
                },
                "IcmpCode": {
                    "type": "number",
                    "description": "The ICMP code to allow, or `-1` to allow `any`. This\ncan only be specified if the protocol is ICMP. (defaults 0)."
                },
                "IcmpType": {
                    "type": "number",
                    "description": "The ICMP type to allow, or `-1` to allow `any`. This\ncan only be specified if the protocol is ICMP. (defaults 0)."
                },
                "Ports": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ports and/or port ranges to allow. This can only\nbe specified if the protocol is TCP, UDP, ALL or a valid protocol number."
                },
                "Protocol": {
                    "type": "string",
                    "description": "The name of the protocol to allow. Valid options are:\n`tcp`, `udp`, `icmp`, `all` or a valid protocol number."
                },
                "TrafficType": {
                    "type": "string",
                    "description": "The traffic type for the rule. Valid options are:\n`ingress` or `egress` (defaults ingress)."
                }
            },
            "required": [
                "CidrList",
                "Protocol"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AclId": {
            "type": "string",
            "description": "The network ACL ID for which to create the rules.\nChanging this forces a new resource to be created."
        },
        "Id": {
            "type": "string"
        },
        "Managed": {
            "type": "boolean",
            "description": "USE WITH CAUTION! If enabled all the firewall rules for\nthis network ACL will be managed by this resource. This means it will delete\nall firewall rules that are not in your config! (defaults false)."
        },
        "Parallelism": {
            "type": "number"
        },
        "Project": {
            "type": "string",
            "description": "The name or ID of the project to deploy this\ninstance to. Changing this forces a new resource to be created."
        },
        "Rule": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/Rule"
            }
        }
    },
    "additionalProperties": false,
    "required": [
        "AclId"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}