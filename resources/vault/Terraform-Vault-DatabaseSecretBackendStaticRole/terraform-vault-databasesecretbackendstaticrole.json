{
    "typeName": "Terraform::Vault::DatabaseSecretBackendStaticRole",
    "description": "Creates a Database Secret Backend static role in Vault. Database secret backend\nstatic roles can be used to manage 1-to-1 mapping of a Vault Role to a user in a\ndatabase for the database.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "definitions": {},
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Backend": {
            "type": "string",
            "description": "The unique name of the Vault mount to configure."
        },
        "DbName": {
            "type": "string",
            "description": "The unique name of the database connection to use for the static role."
        },
        "Name": {
            "type": "string",
            "description": "A unique name to give the static role."
        },
        "RotationPeriod": {
            "type": "number",
            "description": "The amount of time Vault should wait before rotating the password, in seconds."
        },
        "RotationStatements": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "Database statements to execute to rotate the password for the configured database user."
        },
        "Username": {
            "type": "string",
            "description": "The database username that this static role corresponds to."
        }
    },
    "additionalProperties": false,
    "required": [
        "Backend",
        "DbName",
        "Name",
        "RotationPeriod",
        "Username"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "read": {
            "permissions": []
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}