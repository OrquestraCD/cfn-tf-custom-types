{
    "typeName": "Terraform::HuaweiCloud::ApiGatewayApi",
    "description": "Provides an API gateway API resource.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/huaweicloud/Terraform-HuaweiCloud-ApiGatewayApi/docs/README.md",
    "definitions": {
        "BackendParameter": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Description": {
                    "type": "string",
                    "description": "Specifies the description of the parameter. The description cannot exceed 255 characters."
                },
                "Location": {
                    "type": "string",
                    "description": "Specifies the parameter location, which can be 'PATH', 'QUERY' or 'HEADER'."
                },
                "Name": {
                    "type": "string",
                    "description": "Specifies the parameter name. A parameter name consists of 1\u201332 characters, starting with a letter.\nOnly letters, digits, periods (.), hyphens (-), and underscores (_) are allowed."
                },
                "Type": {
                    "type": "string",
                    "description": "Specifies the parameter type, which can be 'REQUEST', 'CONSTANT', or 'SYSTEM'."
                },
                "Value": {
                    "type": "string",
                    "description": "Specifies the parameter value, which is a string of not more than 255 characters.\nThe value varies depending on the parameter type:\n- 'REQUEST': parameter name in `request_parameter`\n- 'CONSTANT': real value of the parameter\n- 'SYSTEM': gateway parameter name."
                }
            },
            "required": [
                "Location",
                "Name",
                "Value"
            ]
        },
        "FunctionBackend": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "FunctionUrn": {
                    "type": "string",
                    "description": "Specifies the function URN."
                },
                "InvocationType": {
                    "type": "string",
                    "description": "Specifies the invocation mode, which can be 'async' or 'sync'."
                },
                "Timeout": {
                    "type": "number",
                    "description": "Timeout duration (in ms) for API Gateway to request for FunctionGraph. Defaults to 50000."
                },
                "Version": {
                    "type": "string",
                    "description": "Specifies the function version."
                }
            },
            "required": [
                "FunctionUrn",
                "InvocationType",
                "Version"
            ]
        },
        "HttpBackend": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Method": {
                    "type": "string",
                    "description": "Specifies the backend request method, including 'GET','POST','PUT' and etc.."
                },
                "Protocol": {
                    "type": "string",
                    "description": "Specifies the backend request protocol. The value can be 'HTTP' and 'HTTPS'."
                },
                "Timeout": {
                    "type": "number",
                    "description": "Timeout duration (in ms) for API Gateway to request for the backend service. Defaults to 50000."
                },
                "Uri": {
                    "type": "string",
                    "description": "Specifies the backend request path. The value must comply with URI specifications."
                },
                "UrlDomain": {
                    "type": "string",
                    "description": "Specifies the backend service address. An endpoint URL is in the format of\n\"domain name (or IP address):port number\", with up to 255 characters. This parameter and `vpc_channel` are alternative."
                },
                "VpcChannel": {
                    "type": "string",
                    "description": "Specifies the VPC channel ID. This parameter and `url_domain` are alternative."
                }
            },
            "required": [
                "Method",
                "Protocol",
                "Uri"
            ]
        },
        "MockBackend": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Description": {
                    "type": "string"
                },
                "ResultContent": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                }
            },
            "required": []
        },
        "RequestParameter": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Default": {
                    "type": "string",
                    "description": "Specifies the default value when the parameter is optional."
                },
                "Description": {
                    "type": "string",
                    "description": "Specifies the description of the parameter. The description cannot exceed 255 characters."
                },
                "Location": {
                    "type": "string",
                    "description": "Specifies the input parameter location, which can be 'PATH', 'QUERY' or 'HEADER'."
                },
                "Name": {
                    "type": "string",
                    "description": "Specifies the input parameter name. A parameter name consists of 1\u201332 characters, starting with a letter.\nOnly letters, digits, periods (.), hyphens (-), and underscores (_) are allowed."
                },
                "Required": {
                    "type": "boolean",
                    "description": "Specifies whether the parameter is mandatory or not."
                },
                "Type": {
                    "type": "string",
                    "description": "Specifies the input parameter type, which can be 'STRING' or 'NUMBER'."
                }
            },
            "required": [
                "Location",
                "Name",
                "Required",
                "Type"
            ]
        },
        "Timeouts": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AuthType": {
            "type": "string",
            "description": "Specifies the security authentication mode.\nThe value can be 'App', 'IAM', and 'NONE'."
        },
        "BackendType": {
            "type": "string",
            "description": "Specifies the service backend type. The value can be:\n- 'HTTP': the web service backend\n- 'FUNCTION': the FunctionGraph service backend\n- 'MOCK': the Mock service backend."
        },
        "Cors": {
            "type": "boolean",
            "description": "Specifies whether CORS is supported or not."
        },
        "Description": {
            "type": "string",
            "description": "Specifies the description of the API.\nThe description cannot exceed 255 characters."
        },
        "ExampleFailureResponse": {
            "type": "string",
            "description": "Specifies the example response for a failed request\nThe length cannot exceed 20,480 characters."
        },
        "ExampleSuccessResponse": {
            "type": "string",
            "description": "Specifies the example response for a successful request.\nThe length cannot exceed 20,480 characters."
        },
        "GroupId": {
            "type": "string",
            "description": "Specifies the ID of the API group.\nChanging this creates a new resource."
        },
        "GroupName": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "Specifies the name of the API. An API name consists of 3\u201364 characters,\nstarting with a letter. Only letters, digits, and underscores (_) are allowed."
        },
        "RequestMethod": {
            "type": "string",
            "description": "Specifies the request method, including 'GET','POST','PUT' and etc.."
        },
        "RequestProtocol": {
            "type": "string",
            "description": "Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'\nwhich means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'."
        },
        "RequestUri": {
            "type": "string",
            "description": "Specifies the request path of the API. The value must comply with URI specifications."
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "the tags of API in format of string list."
        },
        "Version": {
            "type": "string",
            "description": "Specifies the version of the API. A maximum of 16 characters are allowed."
        },
        "Visibility": {
            "type": "number",
            "description": "Specifies whether the API is available to the public.\nThe value can be 1 (public) and 2 (private). Defaults to 2."
        },
        "BackendParameter": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/BackendParameter"
            }
        },
        "FunctionBackend": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/FunctionBackend"
            },
            "maxItems": 1
        },
        "HttpBackend": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/HttpBackend"
            },
            "maxItems": 1
        },
        "MockBackend": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/MockBackend"
            },
            "maxItems": 1
        },
        "RequestParameter": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/RequestParameter"
            }
        },
        "Timeouts": {
            "$ref": "#/definitions/Timeouts"
        }
    },
    "additionalProperties": false,
    "required": [
        "AuthType",
        "BackendType",
        "ExampleSuccessResponse",
        "GroupId",
        "Name",
        "RequestMethod",
        "RequestUri"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/GroupName",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}