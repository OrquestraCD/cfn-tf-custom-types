{
    "typeName": "Terraform::HuaweiCloud::VpnaasServiceV2",
    "description": "Manages a V2 VPN service resource within HuaweiCloud.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/huaweicloud/Terraform-HuaweiCloud-VpnaasServiceV2/docs/README.md",
    "definitions": {
        "Timeouts": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                },
                "Update": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "AdminStateUp": {
            "type": "boolean",
            "description": "The administrative state of the resource. Can either be up(true) or down(false).\nChanging this updates the administrative state of the existing service."
        },
        "Description": {
            "type": "string",
            "description": "The human-readable description for the service.\nChanging this updates the description of the existing service."
        },
        "ExternalV4Ip": {
            "type": "string"
        },
        "ExternalV6Ip": {
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "Name": {
            "type": "string",
            "description": "The name of the service. Changing this updates the name of\nthe existing service."
        },
        "Region": {
            "type": "string",
            "description": "The region in which to obtain the V2 Networking client.\nA Networking client is needed to create a VPN service. If omitted, the\n`region` argument of the provider is used. Changing this creates a new\nservice."
        },
        "RouterId": {
            "type": "string",
            "description": "The ID of the router. Changing this creates a new service."
        },
        "Status": {
            "type": "string"
        },
        "SubnetId": {
            "type": "string",
            "description": "SubnetID is the ID of the subnet. Default is null."
        },
        "TenantId": {
            "type": "string",
            "description": "The owner of the service. Required if admin wants to\ncreate a service for another project. Changing this creates a new service."
        },
        "ValueSpecs": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "MapKey": {
                        "type": "string"
                    },
                    "MapValue": {
                        "type": "string"
                    }
                },
                "required": [
                    "MapKey",
                    "MapValue"
                ]
            },
            "description": "Map of additional options."
        },
        "Timeouts": {
            "$ref": "#/definitions/Timeouts"
        }
    },
    "additionalProperties": false,
    "required": [
        "RouterId"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/ExternalV4Ip",
        "/properties/ExternalV6Ip",
        "/properties/Id",
        "/properties/Status"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "read": {
            "permissions": [
                "s3:GetObject"
            ]
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "lambda:InvokeFunction"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}