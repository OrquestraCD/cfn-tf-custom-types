{
    "typeName": "Terraform::OpenStack::ImagesImageV2",
    "description": "Manages a V2 Image resource within OpenStack Glance.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "definitions": {
        "Timeouts": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Checksum": {
            "type": "string"
        },
        "ContainerFormat": {
            "type": "string",
            "description": "The container format. Must be one of\n\"ami\", \"ari\", \"aki\", \"bare\", \"ovf\"."
        },
        "CreatedAt": {
            "type": "string"
        },
        "DiskFormat": {
            "type": "string",
            "description": "The disk format. Must be one of\n\"ami\", \"ari\", \"aki\", \"vhd\", \"vmdk\", \"raw\", \"qcow2\", \"vdi\", \"iso\"."
        },
        "File": {
            "type": "string"
        },
        "ImageCachePath": {
            "type": "string",
            "description": "This is the directory where the images will\nbe downloaded. Images will be stored with a filename corresponding to\nthe url's md5 hash. Defaults to \"$HOME/.terraform/image_cache\"."
        },
        "ImageSourceUrl": {
            "type": "string",
            "description": "This is the url of the raw image that will\nbe downloaded in the `image_cache_path` before being uploaded to Glance.\nGlance is able to download image from internet but the `gophercloud` library\ndoes not yet provide a way to do so.\nConflicts with `local_file_path`."
        },
        "LocalFilePath": {
            "type": "string",
            "description": "This is the filepath of the raw image file\nthat will be uploaded to Glance. Conflicts with `image_source_url`."
        },
        "Metadata": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "Key": {
                        "type": "string"
                    },
                    "Value": {
                        "type": "string"
                    }
                },
                "required": [
                    "Key",
                    "Value"
                ]
            }
        },
        "MinDiskGb": {
            "type": "number",
            "description": "Amount of disk space (in GB) required to boot image.\nDefaults to 0."
        },
        "MinRamMb": {
            "type": "number",
            "description": "Amount of ram (in MB) required to boot image.\nDefauts to 0."
        },
        "Name": {
            "type": "string",
            "description": "The name of the image."
        },
        "Owner": {
            "type": "string"
        },
        "Properties": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "Key": {
                        "type": "string"
                    },
                    "Value": {
                        "type": "string"
                    }
                },
                "required": [
                    "Key",
                    "Value"
                ]
            },
            "description": "A map of key/value pairs to set freeform\ninformation about an image. See the \"Notes\" section for further\ninformation about properties."
        },
        "Protected": {
            "type": "boolean",
            "description": "If true, image will not be deletable.\nDefaults to false."
        },
        "Region": {
            "type": "string",
            "description": "The region in which to obtain the V2 Glance client.\nA Glance client is needed to create an Image that can be used with\na compute instance. If omitted, the `region` argument of the provider\nis used. Changing this creates a new Image."
        },
        "Schema": {
            "type": "string"
        },
        "SizeBytes": {
            "type": "number"
        },
        "Status": {
            "type": "string"
        },
        "Tags": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "The tags of the image. It must be a list of strings.\nAt this time, it is not possible to delete all tags of an image."
        },
        "UpdateAt": {
            "type": "string"
        },
        "UpdatedAt": {
            "type": "string"
        },
        "VerifyChecksum": {
            "type": "boolean",
            "description": "If false, the checksum will not be verified\nonce the image is finished uploading. Defaults to true."
        },
        "Visibility": {
            "type": "string",
            "description": "The visibility of the image. Must be one of\n\"public\", \"private\", \"community\", or \"shared\". The ability to set the\nvisibility depends upon the configuration of the OpenStack cloud."
        },
        "Timeouts": {
            "$ref": "#/definitions/Timeouts"
        }
    },
    "additionalProperties": false,
    "required": [
        "ContainerFormat",
        "DiskFormat",
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Checksum",
        "/properties/CreatedAt",
        "/properties/File",
        "/properties/Metadata",
        "/properties/Owner",
        "/properties/Schema",
        "/properties/SizeBytes",
        "/properties/Status",
        "/properties/UpdateAt",
        "/properties/UpdatedAt"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "read": {
            "permissions": []
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}