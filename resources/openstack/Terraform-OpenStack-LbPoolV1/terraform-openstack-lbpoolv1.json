{
    "typeName": "Terraform::OpenStack::LbPoolV1",
    "description": "Manages a V1 load balancer pool resource within OpenStack.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/openstack/Terraform-OpenStack-LbPoolV1/docs/README.md",
    "definitions": {
        "Timeouts": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Create": {
                    "type": "string"
                },
                "Delete": {
                    "type": "string"
                }
            },
            "required": []
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "Id": {
            "type": "string"
        },
        "LbMethod": {
            "type": "string",
            "description": "The algorithm used to distribute load between the\nmembers of the pool. The current specification supports 'ROUND_ROBIN' and\n'LEAST_CONNECTIONS' as valid values for this attribute."
        },
        "LbProvider": {
            "type": "string",
            "description": "The backend load balancing provider. For example:\n`haproxy`, `F5`, etc."
        },
        "Member": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "An existing node to add to the pool. Changing this\nupdates the members of the pool. The member object structure is documented\nbelow. Please note that the `member` block is deprecated in favor of the\n`openstack_lb_member_v1` resource."
        },
        "MonitorIds": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "A list of IDs of monitors to associate with the\npool."
        },
        "Name": {
            "type": "string",
            "description": "The name of the pool. Changing this updates the name of\nthe existing pool."
        },
        "Protocol": {
            "type": "string",
            "description": "The protocol used by the pool members, you can use\neither 'TCP, 'HTTP', or 'HTTPS'. Changing this creates a new pool."
        },
        "Region": {
            "type": "string",
            "description": "The region in which to obtain the V2 Networking client.\nA Networking client is needed to create an LB pool. If omitted, the\n`region` argument of the provider is used. Changing this creates a new\nLB pool."
        },
        "SubnetId": {
            "type": "string",
            "description": "The network on which the members of the pool will be\nlocated. Only members that are on this network can be added to the pool.\nChanging this creates a new pool."
        },
        "TenantId": {
            "type": "string",
            "description": "The owner of the pool. Required if admin wants to\ncreate a pool member for another tenant. Changing this creates a new pool."
        },
        "Timeouts": {
            "$ref": "#/definitions/Timeouts"
        }
    },
    "additionalProperties": false,
    "required": [
        "LbMethod",
        "Name",
        "Protocol",
        "SubnetId"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/Id"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "read": {
            "permissions": []
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}