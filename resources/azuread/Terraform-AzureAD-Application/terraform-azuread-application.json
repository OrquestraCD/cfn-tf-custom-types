{
    "typeName": "Terraform::AzureAD::Application",
    "description": "Manages an Application within Azure Active Directory.\n\n-> **NOTE:** If you're authenticating using a Service Principal then it must have permissions to both `Read and write owned by applications` and `Sign in and read user profile` within the `Windows Azure Active Directory` API.",
    "sourceUrl": "https://github.com/iann0036/cfn-tf-custom-types.git",
    "documentationUrl": "https://github.com/iann0036/cfn-tf-custom-types/blob/docs/resources/azuread/Terraform-AzureAD-Application/docs/README.md",
    "definitions": {
        "AppRole": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "AllowedMemberTypes": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in daemon service scenarios) by setting to `Application`, or to both."
                },
                "Description": {
                    "type": "string",
                    "description": "Permission help text that appears in the admin app assignment and consent experiences."
                },
                "DisplayName": {
                    "type": "string",
                    "description": "Display name for the permission that appears in the admin consent and app assignment experiences."
                },
                "IsEnabled": {
                    "type": "boolean",
                    "description": "Determines if the app role is enabled: Defaults to `true`."
                },
                "Value": {
                    "type": "string",
                    "description": "Specifies the value of the roles claim that the application should expect in the authentication and access tokens."
                }
            },
            "required": [
                "AllowedMemberTypes",
                "Description",
                "DisplayName"
            ]
        },
        "RequiredResourceAccess": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "ResourceAppId": {
                    "type": "string",
                    "description": "The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application."
                },
                "ResourceAccess": {
                    "type": "array",
                    "insertionOrder": true,
                    "items": {
                        "$ref": "#/definitions/ResourceAccess"
                    },
                    "minItems": 1
                }
            },
            "required": [
                "ResourceAppId"
            ]
        },
        "ResourceAccess": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Id": {
                    "type": "string",
                    "description": "The unique identifier for one of the `OAuth2Permission` or `AppRole` instances that the resource application exposes."
                },
                "Type": {
                    "type": "string",
                    "description": "Specifies whether the id property references an `OAuth2Permission` or an `AppRole`. Possible values are `Scope` or `Role`."
                }
            },
            "required": [
                "Id",
                "Type"
            ]
        }
    },
    "properties": {
        "tfcfnid": {
            "description": "Internal identifier for tracking resource changes. Do not use.",
            "type": "string"
        },
        "ApplicationId": {
            "type": "string"
        },
        "AvailableToOtherTenants": {
            "type": "boolean",
            "description": "Is this Azure AD Application available to other tenants? Defaults to `false`."
        },
        "GroupMembershipClaims": {
            "type": "string",
            "description": "Configures the `groups` claim issued in a user or OAuth 2.0 access token that the app expects. Defaults to `SecurityGroup`. Possible values are `None`, `SecurityGroup` or `All`."
        },
        "Homepage": {
            "type": "string",
            "description": "The URL to the application's home page. If no homepage is specified this defaults to `https://{name}`."
        },
        "Id": {
            "type": "string"
        },
        "IdentifierUris": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "type": "string"
            },
            "description": "A list of user-defined URI(s) that uniquely identify a Web application within it's Azure AD tenant, or within a verified custom domain if the application is multi-tenant."
        },
        "LogoutUrl": {
            "type": "string",
            "description": "The URL of the logout page."
        },
        "Name": {
            "type": "string",
            "description": "The display name for the application."
        },
        "Oauth2AllowImplicitFlow": {
            "type": "boolean",
            "description": "Does this Azure AD Application allow OAuth2.0 implicit flow tokens? Defaults to `false`."
        },
        "ObjectId": {
            "type": "string"
        },
        "Owners": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "A list of Azure AD Object IDs that will be granted ownership of the application. Defaults to the Object ID of the caller creating the application. If a list is specified the caller Object ID will no longer be included unless explicitly added to the list."
        },
        "PublicClient": {
            "type": "boolean",
            "description": "Is this Azure AD Application a public client? Defaults to `false`."
        },
        "ReplyUrls": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "type": "string"
            },
            "description": "A list of URLs that user tokens are sent to for sign in, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to."
        },
        "Type": {
            "type": "string",
            "description": "Type of an application: `webapp/api` or `native`. Defaults to `webapp/api`. For `native` apps type `identifier_uris` property can not not be set."
        },
        "AppRole": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/AppRole"
            }
        },
        "RequiredResourceAccess": {
            "type": "array",
            "insertionOrder": true,
            "items": {
                "$ref": "#/definitions/RequiredResourceAccess"
            }
        },
        "ResourceAccess": {
            "type": "array",
            "insertionOrder": false,
            "items": {
                "$ref": "#/definitions/ResourceAccess"
            },
            "minItems": 1
        }
    },
    "additionalProperties": false,
    "required": [
        "Name"
    ],
    "readOnlyProperties": [
        "/properties/tfcfnid",
        "/properties/ApplicationId",
        "/properties/Id",
        "/properties/ObjectId"
    ],
    "primaryIdentifier": [
        "/properties/tfcfnid"
    ],
    "handlers": {
        "create": {
            "permissions": [
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "read": {
            "permissions": []
        },
        "update": {
            "permissions": [
                "s3:GetObject",
                "s3:PutObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "delete": {
            "permissions": [
                "s3:GetObject",
                "s3:DeleteObject",
                "secretsmanager:GetSecretValue"
            ]
        },
        "list": {
            "permissions": []
        }
    }
}